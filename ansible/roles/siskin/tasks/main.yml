- name: Set tempdir
  copy:
    dest: /etc/profile.d/siskin_tmp_dir.sh
    content: |
      export TMPDIR={{ siskin_tmp_dir }}
- name: Set proxy
  copy:
    dest: /etc/profile.d/siskin_proxy.sh
    content: |
      export no_proxy={{ siskin_no_proxy }}
      export http_proxy={{ siskin_proxy }}
      export https_proxy={{ siskin_proxy }}
      export ftp_proxy={{ siskin_proxy }}

- name: Ensure group finc exists
  group:
    name: '{{ siskin_group }}'
    state: present
- name: Create service worker
  user:
    name: '{{ siskin_user }}'
    group: '{{ siskin_group }}'
    shell: /bin/bash
    create_home: true
    umask: "0022"

- name: Install common packages for siskin
  dnf:
    state: present
    name:
    - bash-completion
    - gcc
    - gcc-c++
    - java-1.8.0-openjdk
    - podman
    - podman-docker
    - podman-plugins
    - podman-tui
    - protobuf-compiler
    - protobuf-devel
    - python3-Cython
    - python3-csvkit
    - python3-devel
    - python3-ipython
    - python3-pip
    - python3-wheel
    - sshuttle
    - yaz
    - yaz-doc
- name: Fetch duckdb distribution
  get_url:
    url: https://github.com/duckdb/duckdb/releases/download/v{{ siskin_extra_version_duckdb }}/duckdb_cli-linux-amd64.zip
    dest: /tmp/duckdb-{{ siskin_extra_version_duckdb }}-dist.zip
    checksum: sha256:892ae08f39598124180fbd2912895beb116f5ca0f32e9657db2376f3d58fec97
- name: Install duckdb client
  shell:
    # remove existing binary, otherwise ansible seems to get stuck
    cmd: rm -f /usr/local/bin/duckdb && unzip -d /usr/local/bin /tmp/duckdb-{{ siskin_extra_version_duckdb }}-dist.zip
- name: Silence podman docker message
  file:
    path: /etc/containers/nodocker
    state: touch
- name: Install vendor packages required for siskin
  dnf:
    state: present
    disable_gpg_check: true
    name:
      - https://github.com/miku/filterline/releases/download/v{{ siskin_vendor_version_filterline }}/filterline-{{ siskin_vendor_version_filterline }}-0.x86_64.rpm
      - https://github.com/miku/groupcover/releases/download/v{{ siskin_vendor_version_groupcover }}/groupcover-{{ siskin_vendor_version_groupcover }}-0.x86_64.rpm
      - https://github.com/miku/metha/releases/download/v{{ siskin_vendor_version_metha }}/metha-{{ siskin_vendor_version_metha }}-0.x86_64.rpm
      - https://github.com/miku/solrbulk/releases/download/v{{ siskin_vendor_version_solrbulk }}/solrbulk-{{ siskin_vendor_version_solrbulk }}-0.x86_64.rpm
      - https://github.com/miku/span/releases/download/v{{ siskin_vendor_version_span }}/span-{{ siskin_vendor_version_span }}-0.x86_64.rpm
      - https://github.com/ubleipzig/solrdump/releases/download/v{{ siskin_vendor_version_solrdump }}/solrdump-{{ siskin_vendor_version_solrdump }}-0.x86_64.rpm
      - https://github.com/miku/unzippa/releases/download/v{{ siskin_vendor_version_unzippa }}/unzippa-{{ siskin_vendor_version_unzippa }}-0.x86_64.rpm
      - https://github.com/miku/zek/releases/download/v{{ siskin_vendor_version_zek }}/zek-{{ siskin_vendor_version_zek }}-0.x86_64.rpm

- name: Download metafacture 4.0.0 (https://github.com/metafacture/metafacture-core/releases/tag/metafacture-runner-4.0.0)
  # We're stuck with MF 4.0.0 so we keep a copy of that version around; there's
  # an additional copy at
  # https://web.archive.org/web/20221029160044id_/https://speicherwolke.uni-leipzig.de/index.php/s/mep2WBWAJgDRd6b/download/metafacture-runner-4.0.0-dist
  get_url:
    url: https://speicherwolke.uni-leipzig.de/index.php/s/mep2WBWAJgDRd6b/download/metafacture-runner-4.0.0-dist.tar.gz
    checksum: sha1:66c750ed2fa16da18016419e94fe6fa5141a0e2e
    dest: /opt/metafacture-runner-4.0.0-dist.tar.gz
- name: Unpack metafacture
  unarchive:
    remote_src: yes
    src: /opt/metafacture-runner-4.0.0-dist.tar.gz
    dest: /opt
- name: Symlink metafacture flux.sh script
  file:
    src: /opt/metafacture-runner-4.0.0/flux.sh
    dest: /usr/local/bin/flux.sh
    owner: '{{ siskin_user }}'
    group: '{{ siskin_group }}'
    state: link

- name: Install siskin python package
  pip:
    name: siskin=={{ siskin_vendor_version_siskin }}
    extra_args: -U -i "{{ siskin_pypi_index_url }}"
  environment:
    USE_CYTHON: 1
- name: Create configuration directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /etc/luigi
    - /etc/siskin
- name: Copy logging config
  copy:
    src: logging.ini
    dest: /etc/luigi/logging.ini
- name: Copy luigi config
  copy:
    src: luigi.cfg
    dest: /etc/luigi/luigi.cfg
- name: Set siskin log file permissions
  file:
    path: /var/log/siskin.log
    state: touch
    mode: '0644'
    owner: '{{ siskin_user }}'
    group: '{{ siskin_group }}'

- name: Create generic fast, large tmp dir; cache; static
  file:
    path: "{{ item }}"
    owner: '{{ siskin_user }}'
    group: '{{ siskin_group }}'
    state: directory
    mode: '0755'
  loop:
    - '{{ siskin_cache_dir }}/metha'
    - '{{ siskin_data_dir }}'
    - '{{ siskin_data_dir }}/siskin'
    - '{{ siskin_static_dir }}'
- name: Start service crond, if not started
  service:
    name: crond
    state: started
- name: Add siskin bash completion
  copy:
    dest: /etc/bash_completion.d/siskin_completion.sh
    src: siskin_completion.sh
- name: Creates an entry like `PATH=/opt/bin:...` on top of crontab
  cron:
    name: PATH
    user: '{{ siskin_user }}'
    env: true
    job: /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# Following tasks are related to regular data updates, e.g. from crossref.

- name: Crontab for [49] crossref API sync
  cron:
    name: Crossref API sync
    user: '{{ siskin_user }}'
    hour: '0'
    minute: '5'
    job: >
      span-crossref-sync -q -p zstd -c {{ siskin_data_dir }}/crossref -t 45m -mode s -verbose -s 2022-01-01 -P feed-1- -i d

- name: Crontab for [140] kalliope download and indexing (WIP)
  cron:
    name: Kalliope download and indexing
    user: '{{ siskin_user }}'
    hour: '12'
    minute: '0'
    job: >
      (set -o pipefail && taskdo KalliopeDirectDownload && taskcat KalliopeDirectDownload | solrbulk -server "$(siskin-whatislive.sh solr_nonlive)/solr/biblio")


# Notification about additional, required configuration.
- debug:
    msg: >
      Project siskin and dependencies set up. Complete the following step manually:
      create /etc/luigi/luigi.cfg, create /etc/siskin/siskin.ini

