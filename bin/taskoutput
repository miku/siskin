#!/usr/bin/env python
# coding: utf-8

"""
Find the output of (most) tasks.
"""

from __future__ import print_function
from gluish.utils import pairwise
from tsk.sources.doaj import *
from tsk.sources.gbv import *
from tsk.sources.hszigr import *
from tsk.sources.ksd import *
from tsk.sources.mtc import *
from tsk.sources.nl import *
from tsk.sources.pao import *
import collections
import luigi
import sys


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print('tsk-output TASKNAME', file=sys.stderr)
        sys.exit(1)

    taskname = sys.argv[1]
    if not taskname in locals():
        print('no such task: %s' % taskname, file=sys.stderr)
        sys.exit(1)

    kwargs = dict((k.lstrip('--').replace('-', '_'), v)
                   for k, v in pairwise(sys.argv[2:]))

    # ignore global arguments
    for param in ('local-scheduler', 'lock', 'lock-pid-dir',
                  'logging-conf-file', 'scheduler-host', 'scheduler-port',
                  'workers'):
        kwargs.pop(param, None)

    # throwaway task, only used to get the types of the params out
    task = locals()[taskname](**kwargs)
    typed_kwargs = dict()
    for k, v in kwargs.iteritems():
        klass = getattr(task.__class__, k).__class__
        typed_kwargs[k] = klass().parse(v)

    task = locals()[taskname](**typed_kwargs)
    output = task.output()

    if isinstance(output, collections.Iterable):
        if isinstance(output, dict):
            for key, target in output.iteritems():
                print(target.fn, file=sys.stdout)
        else:
            for op in output:
                try:
                    print(op.path, file=sys.stdout)
                except AttributeError:
                    print(op, file=sys.stdout)
    else:
        print(output.path, file=sys.stdout)
