#!/usr/bin/env python3
# coding: utf-8
#
# Copyright 2021 by Leipzig University Library, http://ub.uni-leipzig.de
#                   The Finc Authors, http://finc.info
#                   Robert Schenk, <robert.schenk@uni-leipzig.de>
#
# This file is part of some open source application.
#
# Some open source application is free software: you can redistribute
# it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# Some open source application is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Foobar. If not, see <http://www.gnu.org/licenses/>.
#
# @license GPL-3.0+ <http://spdx.org/licenses/GPL-3.0+>

"""

Source: British Library Bibliography
SID: 180
Ticket: #15836, #17777, #17787, #19109
Origin: Z39.50

"""


import sys

import marcx
import pymarc
from gluish.utils import shellout
from siskin.configuration import Config
from siskin.utils import marc_clean_record, convert_to_finc_id, remove_delimiter
from siskin.arguments import FincArgumentParser


##################################################################################
# 1. Parse arguments and prepare outputfile
##################################################################################

SID = "180"

fip = FincArgumentParser()

# Get arguments
inputfile = fip.args.inputfile
outputformat = fip.args.outputformat

# Generates string for outputfilename, example: 196-output-20200701.fincmarc.mrc
outputfilename = fip.outputfilename(SID)

# Removes n old inputfiles and outputfiles as specified in input-hist-size and output-hist-size
fip.remove_old_outputfiles(SID)
fip.remove_old_inputfiles(SID)

# Set output format for MARC record
if outputformat == "xml":
    outputfile = pymarc.XMLWriter(open(outputfilename, "wb"))
else:
    outputfile = open(outputfilename, "wb")


##################################################################################
# 2. Get input data
##################################################################################

# Look for ready inputfile
if not inputfile:
    config = Config.instance()
    try:
        inputfile = config.get(SID, "input")
    except:
        inputfile = ""

# Otherwise harvest new file
if not inputfile:

    # Build name for inputfile with current date
    inputfile = fip.inputfilename(SID)

    # Look for Z39.50 authentication
    try:
        login = config.get(SID, "z39auth")
    except:
        sys.exit("No authentication for Z39.50 given in siskin.ini")

    # Look for file with Z39.50 queries
    try:
        commands = config.get(SID, "commands")
    except:
        sys.exit("No file with commands for Z39.50 given in siskin.ini")

    # Harvest input data
    cmd = 'yaz-client -f <(cat <(echo "%s") "%s") -m "%s"' % (login, commands, inputfile)
    shellout(cmd)

inputfile = open(inputfile, "rb")
reader = pymarc.MARCReader(inputfile, force_utf8=True)


##################################################################################
# 3. Process data
##################################################################################

for record in reader:

    record = marcx.Record.from_record(record)
    record.force_utf8 = True
    record.strict = False

    # Identifier
    f001 = record["001"].data
    record.remove_fields("001")
    record.add("001", data="180-" + f001)

    # Access type
    try:
        f007 = record["007"].data
    except:
        record.add("007", data="tu")

    # Collection and sealing
    collections = ["a", f001, "b", "180", "c", "sid-180-col-bnbfidbbi"]
    record.add("980", subfields=collections)

    # Convert all identifier in 001, 770, 772 ... to Finc schema
    record = convert_to_finc_id(SID, record, encode=False, finc_prefix=False)

    # Remove empty subfields
    marc_clean_record(record)

    # Remove surplus delimiters (ISBD etc.)
    remove_delimiter(record)

    # Write record to file
    if outputformat == "xml":
        outputfile.write(record)
    else:
        outputfile.write(record.as_marc())

outputfile.close()
