#!/usr/bin/env python
# coding: utf-8
#
# Copyright 2020 by Leipzig University Library, http://ub.uni-leipzig.de
#                   The Finc Authors, http://finc.info
#                   Robert Schenk, <robert.schenk@uni-leipzig.de>
#                   Martin Czygan, <martin.czygan@uni-leipzig.de>
#
# This file is part of some open source application.
#
# Some open source application is free software: you can redistribute
# it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# Some open source application is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
#
# @license GPL-3.0+ <http://spdx.org/licenses/GPL-3.0+>

"""

Source: Beuth Perinorm
SID: 201
Ticket: #7014, #16140
Origin: FTP

"""


import re
import sys
import json
import requests

from siskin.configuration import Config
from siskin.arguments import FincArgumentParser


def get_field(record, field):
    try:
        return record[field]
    except:
        return ""


def get_amsl_data():
    return set(((v["megaCollection"], v["ISIL"]) for v in requests.get("https://live.amsl.technology/outboundservices/list?do=metadata_usage").json() if v["sourceID"] == "201"))


##################################################################################
# 1. Parse arguments and prepare outputfile
##################################################################################

SID = "201"

fip = FincArgumentParser()
outputfilename = fip.outputfilename(SID)
inputfilename = fip.args.inputfilename
outputformat = "json"

fip.remove_old_inputfiles(SID)
fip.remove_old_outputfiles(SID)

outputfile = open(outputfilename, "w")


##################################################################################
# 2. Get input data
################################################################################

if not inputfilename:
    config = Config.instance()
    inputfilename = config.get(SID, "input")

inputfile = open(inputfilename, "r")


##################################################################################
# 3. Process data
##################################################################################

amslsets = get_amsl_data()

for record in inputfile:

    record = json.loads(record)    

    # Add institutions
    mega_collection = get_field(record, "mega_collection")
    institutions = []

    for amslset in amslsets:
        if mega_collection[0] == amslset[0]:
            institutions.append(amslset[1])

    record["institution"] = institutions

    # Write one JSON-record
    outputfile.write(json.dumps(record) + "\n")

inputfile.close()
outputfile.close()
