#!/usr/bin/env python
# coding: utf-8
#
# Copyright 2020 by Leipzig University Library, http://ub.uni-leipzig.de
#                   The Finc Authors, http://finc.info
#                   Robert Schenk, <robert.schenk@uni-leipzig.de>
#
# This file is part of some open source application.
#
# Some open source application is free software: you can redistribute
# it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# Some open source application is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
#
# @license GPL-3.0+ <http://spdx.org/licenses/GPL-3.0+>

"""

Source: Online Contents (OLC)
SID: 68
Ticket: #5163, #6743, #9354, #10294, #16196
Origin: HTTP

"""


import re
import sys
from io import BytesIO, StringIO

import marcx
import pymarc
from siskin.configuration import Config
from siskin.utils import marc_clean_record, xmlstream, convert_to_finc_id
from siskin.arguments import FincArgumentParser


def get_field(record, field, subfield):
    try:
        return record[field][subfield]
    except:
        return ""


##################################################################################
# 1. Parse arguments and prepare outputfile
##################################################################################

SID = "68"

fip = FincArgumentParser()
outputfilename = fip.outputfilename(SID)
outputformat = fip.args.outputformat
inputfilename = fip.args.inputfilename

fip.remove_old_outputfiles(SID)

# Set output format for MARC record
if outputformat == "xml":
    outputfile = pymarc.XMLWriter(open(outputfilename, "wb"))
else:
    outputfile = open(outputfilename, "wb")


##################################################################################
# 2. Get input data
################################################################################

if not inputfilename:
    config = Config.instance()
    inputfilename = config.get(SID, "input")


##################################################################################
# 3. Process data
##################################################################################

for oldrecord in xmlstream(inputfilename, "record"):

    oldrecord = BytesIO(oldrecord)
    oldrecord = pymarc.marcxml.parse_xml_to_array(oldrecord)
    oldrecord = oldrecord[0]

    record = marcx.Record.from_record(oldrecord)
    record.force_utf8 = True
    record.strict = False

    # Kick titles without URL or data needed for link resolver
    issue = get_field(record, "773", "l")
    spage = get_field(record, "773", "q")
    volume = get_field(record, "773", "v")
    issn = get_field(record, "773", "x")
    url = get_field(record, "856", "u")
    fulltext = get_field(record, "856", "3")

    if url and fulltext:
        pass
    elif issue and spage and issn: # and not volume
        continue
    else:
        continue

    # Leader Pos 7 anpassen, falls als Buchkapitel ausgewiesen
    leader = record.leader
    if leader[7] == "a":
        leader1 = record.leader[:7]
        leader2 = record.leader[8:]
        leader = leader1 + "b" + leader2
        record.leader = leader

    # Identifikator
    f001 = record["001"].data
    record.remove_fields("001")
    record.add("001", data="68-" + f001)

    # Zugangstyp
    try:
        f007 = record["007"].data
    except:
        record.add("007", data="cr")

    # Ansigelung und Kollektion
    record.remove_fields("980")
    fields = record.get_fields("912")
    if fields:
        for field in fields:
            f912a = field.get_subfields("a")[0]
            if "SSG-OLC-MKW" in f912a:
                record.add("980", a=f001, b="68", c="sid-68-col-olcmkw")
                break
            elif "SSG-OLC-FTH" in f912a:
                record.add("980", a=f001, b="68", c="sid-68-col-olcfth")
                break
            elif "SSG-OLC-BUB" in f912a:
                record.add("980", a=f001, b="68", c="sid-68-col-olcbub")
                break
        else:
            continue

    # Convert all identifier in 001, 770, 772 ... to Finc schema
    record = convert_to_finc_id(SID, record, encode=False, finc_prefix=False)

    # Remove empty subfields
    marc_clean_record(record)

    if outputformat == "xml":
        outputfile.write(record)
    else:
        outputfile.write(record.as_marc())

outputfile.close()
