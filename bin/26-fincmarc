#!/usr/bin/env python3
# coding: utf-8
#
# Copyright 2020 by Leipzig University Library, http://ub.uni-leipzig.de
#                   The Finc Authors, http://finc.info
#                   Robert Schenk, <robert.schenk@uni-leipzig.de>
#
# This file is part of some open source application.
#
# Some open source application is free software: you can redistribute
# it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# Some open source application is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
#
# @license GPL-3.0+ <http://spdx.org/licenses/GPL-3.0+>

"""

Source: DOAB
SID: 26
Ticket: #15786, #18026
Origin: OAI

"""


import sys
import re
from io import BytesIO

import pymarc

import marcx
from gluish.utils import shellout
from siskin.configuration import Config
from siskin.mappings import formats
from siskin.utils import xmlstream, marc_clean_record, convert_to_finc_id, marc_normalize_subjects
from siskin.arguments import FincArgumentParser


adlr_subjects = ["Communication. Mass media", "Information theory", "Motion pictures", "Music", "Performing Arts", "Communication Studies",
                     "Media & Communications", "Media And Communications", "Media, Information & Communication Industries", "Political Communication",
                     "Media And Communication", "Media & Communication", "History Of Communication", "Film Music", "Film", "Film, Tv & Radio",
                     "Film Theory & Criticism", "Films, Cinema", "Film Studies", "Individual Film Directors, Film-Makers", "Film Theory", "Film History",
                     "Film Production: Technical & Background Skills", "Filmwissenschaft", "Film: Styles & Genres", "Documentary Films", "Documentary Film",
                     "Television", "Télévision", "Radio & Television Industry", "Radio", "Media Studies", "Media", "Social Media", "Digital Media",
                     "Media Aesthetics", "Media Theory", "Sociology Of Media", "Media History", "Entertainment & Media Law", "Intermedialität",
                     "Intermediality", "New Media", "Media Law", "Media Education", "Media Policy", "Media Philosophy", "European Media", "Transmediality",
                     "Transmedia", "Media Studies: Internet", "Media Psychology", "Media Literacy", "Media Governance", "Medien", "Medienwissenschaft",
                     "Medienästhetik", "Digitale Medien", "Mediensoziologie", "Medientheorie", "Mediengeschichte", "Medienrecht", "Medienkunst",
                     "Medienpädagogik", "Neue Medien", "Mediendidaktik", "Massenmedien", "Medienkultur", "Politische Kommunikation", "Kommunikation"]


##################################################################################
# 1. Parse arguments and prepare outputfile
##################################################################################

SID = "26"

fip = FincArgumentParser()

# Get arguments
inputfile = fip.args.inputfile
outputformat = fip.args.outputformat

# Generates string for outputfilename, example: 196-output-20200701.fincmarc.mrc
outputfilename = fip.outputfilename(SID)

# Removes n old input and outputfiles as specified in input-hist-size and output-hist-size
fip.remove_old_outputfiles(SID)
fip.remove_old_inputfiles(SID)

# Set output format for MARC record
if outputformat == "xml":
    outputfile = pymarc.XMLWriter(open(outputfilename, "wb"))
else:
    outputfile = open(outputfilename, "wb")


##################################################################################
# 2. Get input data
################################################################################

if not inputfile:
    inputfile = fip.inputfilename(SID)
    shellout("wget -O %s https://directory.doabooks.org/download-export?format=marcxml" % inputfile)


##################################################################################
# 3. Process data
##################################################################################

for oldrecord in xmlstream(inputfile, "record"):

    oldrecord = BytesIO(oldrecord)
    oldrecord = pymarc.marcxml.parse_xml_to_array(oldrecord)
    oldrecord = oldrecord[0]

    record = marcx.Record.from_record(oldrecord)
    record.force_utf8 = True
    record.strict = False

    # Format 
    format = "Book"

    # Leader
    leader = formats[format]["Leader"]
    record.leader = leader

    # Identifikator
    try:
        f001 = record["001"].data
    except:
        continue
    # https://directory.doabooks.org/handle/20.500.12854/56455
    f001 = f001.split("/")
    f001 = f001[-1]
    record.remove_fields("001")
    record.add("001", data="26-" + f001)

    # Access type
    record.remove_fields("007")
    f007 = formats[format]["e007"]
    record.add("007", data=f007)

    # RDA-Content
    f336b = formats[format]["336b"]
    record.add("336", b=f336b)

    # RDA-Carrier
    f338b = formats[format]["338b"]
    record.add("338", b=f338b)

    # Subject headings
    subjects = marc_normalize_subjects(record)
    record.remove_fields("650")
    record.remove_fields("651")
    record.remove_fields("653")
    for subject in subjects:
        record.add("650", a=subject)

    # SWB-Content
    f935c = formats[format]["935c"]
    record.add("935", c=f935c)

    # Collection and sealing
    f980c = "sid-26-col-doab"
    for subject in subjects:
        if subject in adlr_subjects:
            f980c = ["sid-26-col-doab", "sid-26-col-doabadlr"]
    record.add("980", a=f001, b=SID, c=f980c)

    # Convert all identifier in 001, 770, 772 ... to Finc schema
    record = convert_to_finc_id(SID, record, encode=False, finc_prefix=False)

    # Remove empty subfields
    marc_clean_record(record)

    # Write record to file
    if outputformat == "xml":
        outputfile.write(record)
    else:
        outputfile.write(record.as_marc())

outputfile.close()
