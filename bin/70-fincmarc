#!/usr/bin/env python3
# coding: utf-8
#
# Copyright 2021 by Leipzig University Library, http://ub.uni-leipzig.de
#                   The Finc Authors, http://finc.info
#                   Robert Schenk, <robert.schenk@uni-leipzig.de>
#
# This file is part of some open source application.
#
# Some open source application is free software: you can redistribute
# it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# Some open source application is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Foobar. If not, see <http://www.gnu.org/licenses/>.
#
# @license GPL-3.0+ <http://spdx.org/licenses/GPL-3.0+>

"""

Source: Institut Ägyptologie
SID: 70
Ticket: #5246, #13232, #14359, #18879
Origin: local

"""


import os
import sys
import re
import sqlite3

import marcx
import pymarc
from siskin.configuration import Config
from siskin.mappings import formats
from siskin.utils import check_isbn, check_issn, marc_get_languages, marc_build_field_008
from siskin.arguments import FincArgumentParser


##################################################################################
# 1. Parse arguments and prepare outputfile
##################################################################################

SID = "70"

fip = FincArgumentParser()

# Get arguments
inputfile = fip.args.inputfile
outputformat = fip.args.outputformat

# Generates string for outputfilename, example: 196-output-20200701.fincmarc.mrc
outputfilename = fip.outputfilename(SID)

# Removes n old outputfiles as specified in output-hist-size
fip.remove_old_outputfiles(SID)

# Set output format for MARC record
if outputformat == "xml":
    outputfile = pymarc.XMLWriter(open(outputfilename, "wb"))
else:
    outputfile = open(outputfilename, "wb")


##################################################################################
# 2. Get input data
##################################################################################

if not inputfile:
    config = Config.instance()
    try:
        inputfile = config.get(SID, "input")
    except:
        sys.exit("No input file given. Use --inputfile or add path to siskin.ini")            

sqlitecon = sqlite3.connect(inputfile)


##################################################################################
# 3. Process data
##################################################################################

query = """
    SELECT
        Reference.ID as id,
        Title as title,
        Subtitle as subtitle,
        ISBN as isbn,
        LanguageCode as language,
        PageCount as pages,
        PlaceOfPublication as place,
        Publisher.Name as publisher,
        Year as year,
        ReferenceType as format,
        Volume as volume,
        Periodical.Name as jtitle,
        GROUP_CONCAT(Author , "; " ) As authors,
        GROUP_CONCAT(Editor , "; " ) As editors,
        Signatur as callnumber,
        SeriesTitle.Name as series,
        PageRange as range
    FROM
        Reference
    LEFT JOIN
        Periodical ON (Periodical.ID = Reference.PeriodicalID)
    LEFT JOIN
        ReferencePublisher ON (ReferencePublisher.ReferenceID = Reference.ID)
    LEFT JOIN
        Publisher ON (Publisher.ID = ReferencePublisher.PublisherID)
    LEFT JOIN
        ReferenceAuthor ON (ReferenceAuthor.ReferenceID = Reference.ID)
    LEFT JOIN
        (SELECT
            ID as AuthorID,
            substr(COALESCE(LastName, '') || ', ' || COALESCE(FirstName, '') || ' ' || COALESCE(MiddleName, ''), 0) as Author
        FROM
            Person) ON (AuthorID = ReferenceAuthor.PersonID)
    LEFT JOIN
        ReferenceEditor ON (ReferenceEditor.ReferenceID = Reference.ID)
    LEFT JOIN
        (SELECT
            ID as EditorID,
            substr(COALESCE(LastName, '') || ', ' || COALESCE(FirstName, '') || ' ' || COALESCE(MiddleName, ''), 0) as Editor
        FROM
            Person) ON (EditorID = ReferenceEditor.PersonID)
    LEFT JOIN
        (SELECT
            GROUP_CONCAT(CallNumber , "; " ) AS Signatur,
            ReferenceID
        FROM
            Location
        GROUP BY
            ReferenceID) as Location2 ON (Location2.ReferenceID = Reference.ID)
    LEFT JOIN
        SeriesTitle ON (SeriesTitle.ID = Reference.SeriesTitleID)
    WHERE
        Title NOT NULL
    GROUP BY
        Reference.ID
    """

sqlite = sqlitecon.cursor()
sqlite.execute(query)

for i, record in enumerate(sqlite):

    author_doublets = []

    # Cleanup None values
    record = [r if r is not None else '' for r in record]

    marcrecord = marcx.Record(force_utf8=True)
    marcrecord.strict = False

    # Format mapping
    format = record[9]
    if format == "JournalArticle" or format == "NewspaperArticle" or format == "Contribution":
        format = "jArticle"
    elif format == "Thesis":
        pass
    else:
        format = "Book"

    # Leader
    leader = formats[format]["Leader"]
    marcrecord.leader = leader

    # Identifier
    f001 = str(i)
    marcrecord.add("001", data="finc-70-" + f001)

    # Access type
    f007 = formats[format]["p007"]
    marcrecord.add("007", data=f007)

    # Periodicity
    year = record[8]
    periodicity = formats[format]["008"]
    language = record[4]
    language = marc_get_languages(language)
    f008 = marc_build_field_008(year, periodicity, language)
    marcrecord.add("008", data=f008)

    # ISBN
    isbn = record[3]
    if isbn:
        f020a = check_issn(issn)
        marcrecord.add("020", a=f020a)

    # ISSN
    issn = record[3]
    if issn:
        f022a = check_issn(issn)
        marcrecord.add("022", a=f022a)

    # Language
    language = record[4]
    f041a = marc_get_languages(language)
    marcrecord.add("041", a=f041a)

    # First creator
    persons = record[12]
    if persons:
        persons = persons.split(";")
        f100a = persons[0]
        f100a = f100a.strip()
        marcrecord.add("100", a=f100a)
        author_doublets.append(f100a)

    # Title statement
    f245a = record[1]
    f245b = record[2]
    marcrecord.add("245", a=f245a, b=f245b)

    # Imprint
    f260a = record[6]
    f260b = record[7]
    f260c = record[8]
    marcrecord.add("260", a=f260a, b=f260b, c=f260c)

    # Extension
    f300a = record[5]
    match = re.search("\<c\>(\d+)\</c\>", f300a)
    if match:
        f300a = match.group(1)
        f300a = f300a + " S."
        marcrecord.add("300", a=f300a)

    # RDA-content
    f336b = formats[format]["336b"]
    marcrecord.add("336", b=f336b)

    # RDA-carrier
    f338b = formats[format]["338b"]
    marcrecord.add("338", b=f338b)

    # Series
    f490a = record[15]
    marcrecord.add("490", a=f490a)

    # GND-content- and carrier
    f655a = formats[format]["655a"]
    f6552 = formats[format]["6552"]
    marcrecord.add("655", a=f655a, _2=f6552)

    # Additional creators
    persons = record[12]
    if persons:
        persons = persons.split(";")
        for person in persons[1:]:
            f700a = person.strip()
            if f700a in author_doublets:
                continue
            marcrecord.add("700", a=f700a)
            author_doublets.append(f700a)

    # Editor
    editors = record[13]
    if editors:
        editors = editors.split(";")
        editors = set(editors)  # wegen der Dopplungen
        for editor in editors:
            f700a = editor.strip()
            marcrecord.add("700", a=f700a)

    # Parent work
    if format == "Article":
        f773t = record[11]
        year = record[8]
        volume = record[10]
        pages = record[16]
        match = re.search("\<os\>(\d+-\d+)\</os\>", pages)

        if match:
            pages = match.group(1)
            pages = ", S. " + pages
        else:
            pages = ""

        if f773t and (volume or year or pages):
            f773g = volume + "(" + year + ")" + pages
        else:
            f773g = ""

        marcrecord.add("773", t=f773t, g=f773g)

    # SWB-content
    f935c = formats[format]["935c"]
    marcrecord.add("935", c=f935c)

    # Link to library collection information
    callnumber = record[14]
    if not callnumber:
        callnumber = "nicht verfügbar"
    marcrecord.add("856",
                   q="text/html",
                   _3="Link zur Bestandsinformation",
                   u="https://www2.gko.uni-leipzig.de/aegyptologisches-institut/bibliothek/informationen.html",
                   z="Bestand der Bibliothek des Ägyptologischen Instituts, bitte informieren Sie sich vor Ort. Signatur: " + callnumber)

    # Collection and sealing
    collections = ["a", f001, "b", "70", "c", "sid-70-col-aegyptologie"]
    marcrecord.add("980", subfields=collections)

    # Write record to file
    if outputformat == "xml":
        outputfile.write(marcrecord)
    else:
        outputfile.write(marcrecord.as_marc())

sqlitecon.close()
outputfile.close()
